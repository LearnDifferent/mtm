<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.learndifferent.mtm.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.github.learndifferent.mtm.entity.UserDO">
        <result column="id" jdbcType="VARCHAR" property="id"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="creation_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="role" jdbcType="VARCHAR" property="role"/>
    </resultMap>

    <select id="getNamesAndPublicBookmarkNums" resultType="com.github.learndifferent.mtm.vo.UserBookmarkNumberVO">
        select count(b.id) bookmarkNumber, u.user_name userName
        from bookmark b
        left join user u on b.user_name = u.user_name
        <where>
            <if test="list != null and list.size() != 0">
                <foreach collection="list" separator="or" open="(" close=") and" item="userName">
                    u.user_name = #{userName}
                </foreach>
            </if>
            b.is_public = 1 and u.is_deleted = 0 and b.is_deleted = 0
        </where>
        group by userName
        order by bookmarkNumber desc;
    </select>

    <insert id="addUser" keyColumn="id" keyProperty="id" useGeneratedKeys="true"
            parameterType="com.github.learndifferent.mtm.dto.UserDTO">
        insert into user (`user_name`, `password`, `creation_time`, `role`)
        values (#{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
                #{createTime,jdbcType=TIMESTAMP}, #{role,jdbcType=VARCHAR})
    </insert>

    <update id="deleteUserByUserId">
        update user
        set is_deleted = 1
        where id = #{id};
    </update>

    <select id="getUserByNameAndPassword" resultMap="BaseResultMap">
        select id, user_name, `password`, creation_time, `role`
        from user
        where user_name = #{userName}
          and password = #{password}
          and is_deleted = 0
        limit 1;
    </select>

    <select id="getUserRoleById" resultType="java.lang.String">
        select role
        from user
        where id = #{id}
          and is_deleted = 0
        limit 1;
    </select>

    <select id="getRoleByName" resultType="java.lang.String">
        select role
        from user
        where user_name = #{userName}
          and is_deleted = 0
        limit 1;
    </select>
    <select id="getUserByName" resultMap="BaseResultMap">
        select id, user_name, `password`, creation_time, `role`
        from user
        where user_name = #{userName}
          and is_deleted = 0
        limit 1;
    </select>
    <select id="getUsers" resultMap="BaseResultMap">
        select id, user_name, `password`, creation_time, `role`
        from user
        where is_deleted = 0
        order by creation_time desc
        <if test="from!=null and size!=null">
            limit #{from}, #{size}
        </if>
    </select>

    <select id="countUsers" resultType="java.lang.Integer">
        select count(*)
        from user
        where is_deleted = 0;
    </select>

    <select id="getUserIdByNameAndPassword" resultType="java.lang.Integer">
        select id
        from user
        where user_name = #{userName}
          and password = #{password}
          and is_deleted = 0
        limit 1;
    </select>
    <select id="getUserIdByName" resultType="java.lang.String">
        select id
        from user
        where user_name = #{username}
          and is_deleted = 0
        limit 1;
    </select>

    <update id="updateUser" parameterType="com.github.learndifferent.mtm.dto.UserDTO">
        update user
        <set>
            <if test="userName != null and userName !=''">
                user_name = #{userName},
            </if>
            <if test="password != null and password !=''">
                `password` = #{password},
            </if>
            <if test="role != null and role !=''">
                `role` = #{role},
            </if>
        </set>
        where id = #{id};
    </update>
</mapper>