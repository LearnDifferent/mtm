<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.learndifferent.mtm.mapper.WebsiteMapper">
    <resultMap id="BaseResultMap" type="com.github.learndifferent.mtm.entity.WebsiteDO">
        <id column="web_id" jdbcType="INTEGER" property="webId"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="url" jdbcType="VARCHAR" property="url"/>
        <result column="img" jdbcType="VARCHAR" property="img"/>
        <result column="desc" jdbcType="VARCHAR" property="desc"/>
        <result column="creation_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="public" jdbcType="BOOLEAN" property="isPublic"/>
    </resultMap>

    <select id="filterPublicBookmarks" resultMap="BaseResultMap"
            parameterType="com.github.learndifferent.mtm.dto.BookmarkFilterDTO">
        select *
        from website
        <where>
            `public` is true
            <if test="usernames != null and usernames.size() != 0">
                <foreach collection="usernames" item="username" open="and (" close=")" separator="or">
                    user_name = #{username}
                </foreach>
            </if>
        </where>
        <!-- fromDatetime 和 toDatetime 表示时间范围 -->
        <if test="fromDatetime != null and toDatetime != null">
            HAVING creation_time <![CDATA[ >= ]]> #{fromDatetime,jdbcType=TIMESTAMP}
            AND creation_time <![CDATA[ <= ]]> #{toDatetime,jdbcType=TIMESTAMP}
        </if>

        <if test="isOrderByUsername == null or isOrderByUsername == false">
            order by creation_time
        </if>
        <if test="isOrderByUsername == true">
            order by user_name
        </if>

        <if test="isDesc == null or isDesc == false">
            desc
        </if>

        <!-- 如果按照时间排序，相同时间下要按照 username 升序排序 -->
        <if test="isOrderByUsername == null or isOrderByUsername == false">
            , user_name asc
        </if>
        <!-- 如果按照 username 排序，相同 username 下要按照时间降序排序 -->
        <if test="isOrderByUsername == true">
            , creation_time desc
        </if>

        <if test="load == null or load lte 0">
            limit 0, 10
        </if>
        <if test="load != null and load gt 0">
            limit 0, #{load}
        </if>
    </select>

    <select id="getPopularPublicBookmarks" resultType="com.github.learndifferent.mtm.dto.PopularBookmarkDTO">
        select count(url) as count, url, title, `desc`, img
        from website
        where `public` is true
        group by url, title, `desc`, img
        order by count desc
        limit #{from}, #{size};
    </select>

    <select id="countDistinctPublicUrl" resultType="java.lang.Integer">
        select count(distinct url)
        from website
        where `public` is true;
    </select>

    <select id="getAllPublicAndSpecificPrivateBookmarks" resultMap="BaseResultMap">
        <!-- 因为 web_id 也是根据时间顺序生成的，所以用 creation_time 和 web_id 排序是一样的效果 -->
        select * from website
        <where>
            `public` is true
            <if test="specUsername != null and specUsername != ''">
                or user_name = #{specUsername}
            </if>
        </where>
        order by `web_id` desc
        <if test="from!=null and size!=null">
            limit #{from},#{size}
        </if>
    </select>

    <select id="getBookmarkById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select *
        from website
        where web_id = #{webId,jdbcType=INTEGER}
    </select>

    <select id="getBookmarksByUrl" resultMap="BaseResultMap">
        select *
        from website
        where url = #{url};
    </select>

    <select id="countAllPublicAndSpecificPrivateBookmarks" resultType="java.lang.Integer">
        select count(web_id)
        from website
        <where>
            `public` is true
            <if test="specUsername != null and specUsername != ''">
                or user_name = #{specUsername}
            </if>
        </where>
        ;
    </select>

    <select id="getUserBookmarks" resultMap="BaseResultMap">
        select *
        from website
        where user_name = #{userName}
        <!-- 如果 shouldIncludePrivate 为 false，就只查找数据库中 public 属性为 true 的 -->
        <if test="!shouldIncludePrivate">
            and `public` is true
        </if>
        order by web_id desc
        <if test="from!=null and size!=null">
            limit #{from},#{size}
        </if>
    </select>

    <select id="countUserBookmarks" resultType="java.lang.Integer">
        select count(user_name)
        from website
        where user_name = #{userName}
        <if test="!shouldIncludePrivate">
            and `public` is true
        </if>
        ;
    </select>

    <select id="getAllPublicBasicWebDataForSearch"
            resultType="com.github.learndifferent.mtm.dto.search.WebForSearchDTO">
        select url, title, img, `desc`
        from website
        where `public` is true
        group by url, title, `desc`, img;
    </select>

    <select id="getAllPublicSomePrivateExcludingSpecificUserBookmark" resultMap="BaseResultMap">
        select *
        from website
        where user_name != #{excludeUsername}
        and ( `public` is true
        <if test="includePrivateUsername != null and includePrivateUsername != '' and !includePrivateUsername.equalsIgnoreCase(excludeUsername)">
            or user_name = #{includePrivateUsername}
        </if>
        ) order by web_id desc limit #{from}, #{size};
    </select>

    <select id="countAllPublicSomePrivateExcludingSpecificUserBookmark" resultType="java.lang.Integer">
        select count(web_id)
        from website
        where user_name != #{excludeUsername}
        and ( `public` is true
        <if test="includePrivateUsername != null and includePrivateUsername != '' and !includePrivateUsername.equalsIgnoreCase(excludeUsername)">
            or user_name = #{includePrivateUsername}
        </if>
        );
    </select>

    <delete id="deleteBookmarkById" parameterType="java.lang.Integer">
        delete
        from website
        where web_id = #{webId,jdbcType=INTEGER}
    </delete>

    <delete id="deleteUserBookmarks">
        delete
        from website
        where user_name = #{userName}
    </delete>

    <insert id="addBookmark" keyColumn="web_id" keyProperty="webId"
            parameterType="com.github.learndifferent.mtm.entity.WebsiteDO"
            useGeneratedKeys="true">
        insert into website(user_name, title, url, img, `desc`, `creation_time`, `public`)
        values (#{userName}, #{title}, #{url}, #{img}, #{desc}, #{createTime}, #{isPublic})
    </insert>

    <update id="updateBookmark" parameterType="com.github.learndifferent.mtm.entity.WebsiteDO">
        update website
        set user_name       = #{userName,jdbcType=VARCHAR},
            title           = #{title,jdbcType=VARCHAR},
            url             = #{url,jdbcType=VARCHAR},
            img             = #{img,jdbcType=VARCHAR},
            `desc`          = #{desc,jdbcType=VARCHAR},
            `creation_time` = #{createTime,jdbcType=TIMESTAMP},
            `public`        = #{isPublic,jdbcType=BOOLEAN}
        where web_id = #{webId,jdbcType=INTEGER}
    </update>

    <select id="getBookmarkOwnerName" resultType="java.lang.String">
        select user_name
        from website
        where web_id = #{webId,jdbcType=INTEGER};
    </select>

    <select id="getVisitedBookmarks" resultType="com.github.learndifferent.mtm.vo.VisitedBookmarksVO">
        select w.user_name, w.title, w.url, w.public isPublic, v.web_id, v.views
        from website_views v
                 left join website w on v.web_id = w.web_id
        order by v.views desc
        limit #{from},#{size};
    </select>
</mapper>